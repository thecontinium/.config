#      .-.     .-.     .-.     .-.     .-.     .-.
# `._.'   `._.'   `._.'   `._.'   `._.'   `._.'   `
#
# github.com/rafi tmux config
#

# Behavior
#-------------------------------------------------

set-option -g default-shell $SHELL
set-option -g default-terminal "tmux-256color"
set -g default-command "reattach-to-user-namespace -l ${SHELL}"

set-option -g set-titles on
set-option -g set-titles-string '#T #W tmux{#S}:#I.#P'

set-window-option -g automatic-rename on
set-window-option -g xterm-keys on

set-option -ga terminal-overrides ',*:Ss=\E[%p1%d q:Se=\E[2 q,*:Tc'
# set-option -ga terminal-overrides ',*:Ss=\E[%p1%d q:Se=\E[2 q'

#set-option -ga terminal-overrides ",rxvt-uni*:Tc"
#set-option -ga terminal-overrides ',rxvt*:Ss=\E[%p1%d q:Se=\E[2 q'
#set-option -ga terminal-overrides ',rxvt*:XT:Ms=\E]52;%p1%s;%p2%s\007'
#set -ga terminal-overrides ',rxvt*:smcup@:rmcup@'
#set -ga terminal-overrides ',rxvt-uni*:XT:Ms=\E]52;%p1%s;%p2%s\007'

# scrollback buffer size increase
set-option -g history-limit 6000

# Address vim mode switching delay (http://superuser.com/a/252717/65504)
set-option -s escape-time 0

# tmux messages are displayed for 4 seconds
set-option -g display-time 4000

# Allow the arrow key to be used immediately after changing windows, default is 500
set-option -g repeat-time 300

# focus events enabled for terminals that support them
set-option -g focus-events on

# Rather than constraining window size to the maximum size of any client
# connected to the *session*, constrain window size to the maximum size of any
# client connected to *that window*. Much more reasonable.
set-window-option -g aggressive-resize on

# Start windows and panes from 1
set-option -g base-index 1
set-window-option -g pane-base-index 1

# Visual notifications
set-option -g visual-bell off
set-option -g visual-activity off
set-option -g visual-silence off

# Window Monitoring
set-window-option -g monitor-activity on
set-window-option -g monitor-silence 0

# Key bindings
#-------------------------------------------------

# Act like GNU screen, use C-a instead of C-b
unbind-key C-b
set-option -g prefix C-a

# In nested tmux clients, send prefix with C-a C-a, or C-a a
bind-key C-a send-prefix
bind-key a send-prefix

# Open new window from current path
bind-key c new-window -c "#{pane_current_path}"

# Create new session
bind-key N new-session

# Kill a session
bind-key D choose-tree -sf "kill-session -t '%%'"

# Use v and g for splitting from current path
unbind-key %
unbind-key '"'
bind-key g split-window -h -c "#{pane_current_path}"
bind-key v split-window -v -c "#{pane_current_path}"

# Session navigation
bind-key n switch-client -n
bind-key p switch-client -p

# Window navigation
bind-key -n M-Left previous-window
bind-key -n M-Right next-window
bind-key -n M-9 previous-window
bind-key -n M-0 next-window

# Window Re-order
bind-key -n M-< swap-window -t -1
bind-key -n M-> swap-window -t +1

# Pane navigation
bind-key h select-pane -L
bind-key j select-pane -D
bind-key k select-pane -U
bind-key l select-pane -R

# Smart pane switching with awareness of vim splits.
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind-key -n C-h if-shell "$is_vim" "send-keys C-h"  "select-pane -L"
bind-key -n C-j if-shell "$is_vim" "send-keys C-j"  "select-pane -D"
bind-key -n C-k if-shell "$is_vim" "send-keys C-k"  "select-pane -U"
bind-key -n C-l if-shell "$is_vim" "send-keys C-l"  "select-pane -R"
bind-key -n C-\ if-shell "$is_vim" "send-keys C-\\" "select-pane -l"

# Bring back clear screen under tmux prefix
bind-key C-l send-keys 'C-l'

# Toggle synchronized input to all panes in current window
bind-key S set-window-option synchronize-panes

# Quick layout shortcuts
bind-key b set-window-option main-pane-width 90\; select-layout main-vertical
bind-key B set-window-option main-pane-height 30\; select-layout main-horizontal

# Use a tick for renaming the window prompt
unbind-key ','
bind-key ` command-prompt -I '#W' -p 'Rename window>' "rename-window '%%'"
unbind-key '$'
bind-key '$' command-prompt -I '#S' -p 'Rename session>' "rename-session '%%'"

# Open a man page in new vertical pane
bind-key / command-prompt -p 'Man>' "split-window -d -v 'exec man %%'"

# Open ncmpcpp in new pane
bind-key C-m split-window -v "exec ~/.local/bin/ncmpcpp"

# Use Facebook PathPicker to select paths from buffer interactively
bind-key f capture-pane \; \
	save-buffer /tmp/tmux-buffer \; \
	new-window -c "#{pane_current_path}" "sh -c 'cat /tmp/tmux-buffer | fpp && rm /tmp/tmux-buffer'"

# Use urlview for displaying all links from buffer
bind-key u capture-pane -J \; save-buffer /tmp/tmux-buffer \; split-window -l 10 "urlview '/tmp/tmux-buffer' && rm /tmp/tmux-buffer"

# Quick view of processes
bind-key P split-window -h 'exec htop'

# Help screen: rebind list-keys window into a new pane
bind-key ? split-window -h 'exec tmux list-keys | less'

# Force a reload of the config file
bind-key r source-file $XDG_CONFIG_HOME/tmux/config \; display-message "Config reloaded."

#bind-key R respawn-window
bind-key R refresh-client
bind-key * list-clients

# Search for previous error
bind-key e copy-mode \; send-keys "?error" C-m

# Disable Ctrl+Arrows to maintain word jump
unbind-key -n C-Left
unbind-key -n C-Right
unbind-key -n C-Up
unbind-key -n C-Down

# Disable arrows, use 'em for easy pane resizing
bind-key -n M-n resize-pane -L 5
bind-key -n M-. resize-pane -R 5
bind-key -n M-m resize-pane -D 5
bind-key -n M-, resize-pane -U 5

# Control
#-------------------------------------------------

# bind vi key-mapping
set-option -g status-keys vi

# vi-style controls for copy mode
set-window-option -g mode-keys vi

# Copy/paste interop
#bind-key C-c run "tmux show-buffer | xsel -ib --logfile $XDG_CACHE_HOME/xsel.log"
#bind-key C-v run "tmux set-buffer \"$(xsel -ob --logfile $XDG_CACHE_HOME/xsel.log)\"; tmux paste-buffer"

unbind -Tcopy-mode-vi Enter
bind-key Escape copy-mode
# bind-key -Tcopy-mode-vi y send -X copy-pipe-and-cancel "xsel -ib --logfile $XDG_CACHE_HOME/xsel.log >/dev/null"
bind-key -Tcopy-mode-vi y send -X copy-pipe-and-cancel "reattach-to-user-namespace pbcopy"
bind-key -Tcopy-mode-vi v send -X begin-selection
bind-key -Tcopy-mode-vi V send -X select-line
bind-key -Tcopy-mode-vi C-v send -X rectangle-toggle
bind-key -Tcopy-mode-vi Escape send -X clear-selection

# Copy whole line
#-------------------------------------------------
bind-key y send-keys Escape 0 \; copy-mode \; send-keys Space
# bind-key Y run-shell -b "$XDG_CONFIG_HOME/tmux/copy_pane_pwd.sh"

# Mouse (tmux >= 2.1)
#-------------------------------------------------

# Allows scrolling and selecting in copy-mode
set-option -g -q mouse on

# Enable mouse copy-mode scrolling
bind-key -T root WheelUpPane   if-shell -F -t = "#{alternate_on}" "send-keys -M" "select-pane -t =; copy-mode -e; send-keys -M"
bind-key -T root WheelDownPane if-shell -F -t = "#{alternate_on}" "send-keys -M" "select-pane -t =; send-keys -M"

# Enable fast scrolling with Ctrl
bind-key -T root C-WheelUpPane if-shell -F -t = "#{alternate_on}" "send-keys -M" "select-pane -t =; copy-mode -e; send-keys -M"
bind-key -Tcopy-mode-vi C-WheelUpPane   send -X halfpage-up
bind-key -Tcopy-mode-vi C-WheelDownPane send -X halfpage-down

# Make mouse-drag work only with Ctrl
# unbind -T root MouseDrag1Pane
# unbind -T root MouseDragEnd1Pane
# unbind -Tcopy-mode-vi MouseDrag1Pane
# unbind -Tcopy-mode-vi MouseDragEnd1Pane
# unbind -Tcopy-mode-vi M-MouseDrag1Pane
# unbind -Tcopy-mode-vi C-MouseDrag1Pane

bind-key -Tcopy-mode-vi MouseDrag1Pane send -X begin-selection
# bind-key -Tcopy-mode-vi MouseDragEnd1Pane send -X copy-pipe-and-cancel "xsel -ib --logfile $XDG_CACHE_HOME/xsel.log >/dev/null"
bind-key -Tcopy-mode-vi MouseDragEnd1Pane send -X copy-pipe-and-cancel "reattach-to-user-namespace pbcopy"

# bind-key -n C-MouseDrag1Pane if -Ft= '#{mouse_any_flag}' 'if -Ft= "#{pane_in_mode}" "copy-mode -M" "send-keys -M"' 'copy-mode -M'
# bind-key -n C-MouseDrag1Pane if -Ft= '#{mouse_any_flag}' 'if -Ft= \"#{pane_in_mode}\" \"copy-mode -M\" \"send-keys -M\"' 'copy-mode -M'

# Toggle mouse on/off
bind-key m set-option -g mouse on \; display 'Mouse: ON'
bind-key M set-option -g mouse off \; display 'Mouse: OFF'

# Look n Feel
#-------------------------------------------------
#
# *-attr options accept: none, bright (or bold), dim, underscore, blink,
#                        reverse, hidden, or italics.

set-option -g message-fg colour11
set-option -g message-bg colour236
set-option -g message-attr none
set-option -g message-command-fg colour253
set-option -g message-command-bg colour236
set-option -g message-command-attr none

set-option -g pane-border-fg colour240
set-option -g pane-border-bg default
set-option -g pane-active-border-fg colour4
set-option -g pane-active-border-bg colour235
set-option -g display-panes-active-colour colour220
set-option -g display-panes-colour colour74

set-window-option -g mode-fg colour11
set-window-option -g mode-bg colour236
set-window-option -g mode-attr none

set-window-option -g clock-mode-colour colour64
set-window-option -g clock-mode-style 24

# Status lines
#-------------------------------------------------

set-option -g status on
set-option -g status-position top
set -g status-justify left

# Refresh 'status-left' and 'status-right' more often
set-option -g status-interval 3

set-option -g status-fg colour239
set-option -g status-bg colour236
set-option -g status-attr default

set-option -g status-left-length 15
set-option -g status-left-fg colour254
set-option -g status-left-bg colour241
set-option -g status-left-attr none
set-option -g status-left '#{?client_prefix,#[fg=colour236]#[bg=colour2],} #S #{?client_prefix,#[fg=colour2],#[fg=colour241]}#[bg=colour235]#[fg=colour234,bg=colour236]░'
set-option -g status-right-fg colour240
set-option -g status-right-bg default
set-option -g status-right-attr none
set-option -g status-right-length 83
set-option -g status-right "#[fg=colour239] #(tmux-mem-cpu-load -i 3) #[fg=colour237]#[fg=colour241] #(pmset -g batt | tail -n +2 | awk '{print $3}' | sed 's/;//') #[fg=colour237]#[fg=colour243] %H:%M #[fg=colour237]#[fg=colour246] #h "

set-window-option -g window-style ''
set-window-option -g window-active-style ''
set-window-option -g pane-active-border-style ''

set-window-option -g window-status-fg colour247
set-window-option -g window-status-bg colour236
set-window-option -g window-status-attr none
set-window-option -g window-status-separator ""
set-window-option -g window-status-format " #[fg=colour243]#I#[fg=colour247]#F#[default]#W #[fg=colour236,bg=colour235]#[fg=colour234,bg=default]░"
set-window-option -g window-status-current-fg colour251
set-window-option -g window-status-current-bg colour239
set-window-option -g window-status-current-attr none
set-window-option -g window-status-current-format "#[fg=colour235]░#[fg=colour235]#I#[fg=colour235]#F#[default]#W #[fg=colour238]#[fg=colour239,bg=colour235]#[fg=colour234,bg=colour236]░"

set-window-option -g window-status-activity-fg colour254
set-window-option -g window-status-activity-bg colour236
set-window-option -g window-status-activity-attr none
set-window-option -g window-status-bell-fg colour169
set-window-option -g window-status-bell-bg colour236
set-window-option -g window-status-bell-attr none
set-window-option -g window-status-last-fg colour247
set-window-option -g window-status-last-bg colour236
set-window-option -g window-status-last-attr none

#  vim: set ft=tmux ts=2 sw=2 tw=80 noet :
